name: CD with gitactions And docker 

on:
  push:
    branches: [ "dev" ]
 
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar
          
          ## 도커 이미지 빌드 후 도커허브에 push하기
      - name: web docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_REPO }}

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            # Spring Boot 컨테이너가 실행 중이거나 이름이 server-9oods인 컨테이너가 존재하는지 확인
            RUNNING=$(docker ps -q --filter "name=server-9oods" 2>/dev/null)
            
            # Spring Boot 컨테이너가 실행 중이거나 존재한다면, 해당 컨테이너를 중지하고 삭제합니다
            if [ -n "$RUNNING" ]; then
                echo "이전 Spring Boot 컨테이너를 중지하고 삭제합니다."
                docker stop "$RUNNING"
                docker rm "$RUNNING"
            fi
            
            if docker inspect "${{ secrets.DOCKER_REPO }}:latest" &>/dev/null; then
             # 이미지 삭제
            docker rmi "${{ secrets.DOCKER_REPO }}:latest"
            echo "이전 이미지를 삭제했습니다."
             fi
  
            # 이미지 다시 가져오기
            docker pull ${{ secrets.DOCKER_REPO }}
            echo "새 이미지를 가져왔습니다."
            
            echo "새로운 Spring Boot 컨테이너를 실행합니다."
            # 새로운 Spring Boot 컨테이너 실행
            docker run --name server-9oods -p 443:443 --net mybridge -v /home/mins99721/docker/volume/spring_data:/data -d ${{ secrets.DOCKER_REPO }}

